type User {
  id: String!
  APIkey: String
  email: String
}

type Accomplishment {
  id: ID!
  userId: String!
  name: String!
  date: Int!
  company: String!
  description: String!
  categories: [AccomplishmentCategory]
}

type AccomplishmentCategory {
  id: ID!
  userId: String!
  description: String!
  category: Category!
  tags: [Tag]
}

type Category {
  id: ID!
  userId: String!
  name: String!
  group: String
  tags: [Tag]
}

type Tag {
  id: ID!
  userId: String!
  name: String!
  category: Category
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelStringFilterInput
  APIkey: ModelStringFilterInput
  email: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getAccomplishment(id: ID!): Accomplishment
  listAccomplishments(filter: ModelAccomplishmentFilterInput, limit: Int, nextToken: String): ModelAccomplishmentConnection
  getAccomplishmentCategory(id: ID!): AccomplishmentCategory
  listAccomplishmentCategorys(filter: ModelAccomplishmentCategoryFilterInput, limit: Int, nextToken: String): ModelAccomplishmentCategoryConnection
  getCategory(id: ID!): Category
  listCategorys(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  getTag(id: ID!): Tag
  listTags(filter: ModelTagFilterInput, limit: Int, nextToken: String): ModelTagConnection
}

input CreateUserInput {
  id: ID
  APIkey: String
  email: String
}

input UpdateUserInput {
  id: String!
  APIkey: String
  email: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createAccomplishment(input: CreateAccomplishmentInput!): Accomplishment
  updateAccomplishment(input: UpdateAccomplishmentInput!): Accomplishment
  deleteAccomplishment(input: DeleteAccomplishmentInput!): Accomplishment
  createAccomplishmentCategory(input: CreateAccomplishmentCategoryInput!): AccomplishmentCategory
  updateAccomplishmentCategory(input: UpdateAccomplishmentCategoryInput!): AccomplishmentCategory
  deleteAccomplishmentCategory(input: DeleteAccomplishmentCategoryInput!): AccomplishmentCategory
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(input: UpdateCategoryInput!): Category
  deleteCategory(input: DeleteCategoryInput!): Category
  createTag(input: CreateTagInput!): Tag
  updateTag(input: UpdateTagInput!): Tag
  deleteTag(input: DeleteTagInput!): Tag
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateAccomplishment: Accomplishment @aws_subscribe(mutations: ["createAccomplishment"])
  onUpdateAccomplishment: Accomplishment @aws_subscribe(mutations: ["updateAccomplishment"])
  onDeleteAccomplishment: Accomplishment @aws_subscribe(mutations: ["deleteAccomplishment"])
  onCreateAccomplishmentCategory: AccomplishmentCategory @aws_subscribe(mutations: ["createAccomplishmentCategory"])
  onUpdateAccomplishmentCategory: AccomplishmentCategory @aws_subscribe(mutations: ["updateAccomplishmentCategory"])
  onDeleteAccomplishmentCategory: AccomplishmentCategory @aws_subscribe(mutations: ["deleteAccomplishmentCategory"])
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateTag: Tag @aws_subscribe(mutations: ["createTag"])
  onUpdateTag: Tag @aws_subscribe(mutations: ["updateTag"])
  onDeleteTag: Tag @aws_subscribe(mutations: ["deleteTag"])
}

type ModelAccomplishmentConnection {
  items: [Accomplishment]
  nextToken: String
}

input ModelAccomplishmentFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  date: ModelIntFilterInput
  company: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelAccomplishmentFilterInput]
  or: [ModelAccomplishmentFilterInput]
  not: ModelAccomplishmentFilterInput
}

input CreateAccomplishmentInput {
  id: ID
  userId: String!
  name: String!
  date: Int!
  company: String!
  description: String!
}

input UpdateAccomplishmentInput {
  id: ID!
  userId: String
  name: String
  date: Int
  company: String
  description: String
}

input DeleteAccomplishmentInput {
  id: ID
}

type ModelAccomplishmentCategoryConnection {
  items: [AccomplishmentCategory]
  nextToken: String
}

input ModelAccomplishmentCategoryFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelAccomplishmentCategoryFilterInput]
  or: [ModelAccomplishmentCategoryFilterInput]
  not: ModelAccomplishmentCategoryFilterInput
}

input CreateAccomplishmentCategoryInput {
  id: ID
  userId: String!
  description: String!
}

input UpdateAccomplishmentCategoryInput {
  id: ID!
  userId: String
  description: String
}

input DeleteAccomplishmentCategoryInput {
  id: ID
}

type ModelCategoryConnection {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  group: ModelStringFilterInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  userId: String!
  name: String!
  group: String
}

input UpdateCategoryInput {
  id: ID!
  userId: String
  name: String
  group: String
}

input DeleteCategoryInput {
  id: ID
}

type ModelTagConnection {
  items: [Tag]
  nextToken: String
}

input ModelTagFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelTagFilterInput]
  or: [ModelTagFilterInput]
  not: ModelTagFilterInput
}

input CreateTagInput {
  id: ID
  userId: String!
  name: String!
}

input UpdateTagInput {
  id: ID!
  userId: String
  name: String
}

input DeleteTagInput {
  id: ID
}
