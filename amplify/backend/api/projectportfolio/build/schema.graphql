type User {
  id: String!
  APIkey: String
  email: String
}

type Project {
  id: ID!
  userId: String!
  date: String!
  name: String
  company: String
  description: String
  skills(filter: ModelProjectSkillFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProjectSkillConnection
}

type ProjectSkill {
  id: ID!
  userId: String!
  project: Project!
  description: String
  skillId: String!
  toolIds: [String]
}

type Category {
  id: ID!
  userId: String!
  name: String!
  skills(filter: ModelSkillFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSkillConnection
}

type Skill {
  id: ID!
  userId: String!
  name: String!
  category: Category
  tools(filter: ModelToolFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelToolConnection
}

type Tool {
  id: ID!
  userId: String!
  skill: Skill!
  name: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelStringFilterInput
  APIkey: ModelStringFilterInput
  email: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
  getProjectSkill(id: ID!): ProjectSkill
  listProjectSkills(filter: ModelProjectSkillFilterInput, limit: Int, nextToken: String): ModelProjectSkillConnection
  getCategory(id: ID!): Category
  listCategorys(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  getSkill(id: ID!): Skill
  listSkills(filter: ModelSkillFilterInput, limit: Int, nextToken: String): ModelSkillConnection
  getTool(id: ID!): Tool
  listTools(filter: ModelToolFilterInput, limit: Int, nextToken: String): ModelToolConnection
}

input CreateUserInput {
  id: ID
  APIkey: String
  email: String
}

input UpdateUserInput {
  id: String!
  APIkey: String
  email: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
  createProjectSkill(input: CreateProjectSkillInput!): ProjectSkill
  updateProjectSkill(input: UpdateProjectSkillInput!): ProjectSkill
  deleteProjectSkill(input: DeleteProjectSkillInput!): ProjectSkill
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(input: UpdateCategoryInput!): Category
  deleteCategory(input: DeleteCategoryInput!): Category
  createSkill(input: CreateSkillInput!): Skill
  updateSkill(input: UpdateSkillInput!): Skill
  deleteSkill(input: DeleteSkillInput!): Skill
  createTool(input: CreateToolInput!): Tool
  updateTool(input: UpdateToolInput!): Tool
  deleteTool(input: DeleteToolInput!): Tool
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject: Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject: Project @aws_subscribe(mutations: ["deleteProject"])
  onCreateProjectSkill: ProjectSkill @aws_subscribe(mutations: ["createProjectSkill"])
  onUpdateProjectSkill: ProjectSkill @aws_subscribe(mutations: ["updateProjectSkill"])
  onDeleteProjectSkill: ProjectSkill @aws_subscribe(mutations: ["deleteProjectSkill"])
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateSkill: Skill @aws_subscribe(mutations: ["createSkill"])
  onUpdateSkill: Skill @aws_subscribe(mutations: ["updateSkill"])
  onDeleteSkill: Skill @aws_subscribe(mutations: ["deleteSkill"])
  onCreateTool: Tool @aws_subscribe(mutations: ["createTool"])
  onUpdateTool: Tool @aws_subscribe(mutations: ["updateTool"])
  onDeleteTool: Tool @aws_subscribe(mutations: ["deleteTool"])
}

type ModelProjectConnection {
  items: [Project]
  nextToken: String
}

input ModelProjectFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  date: ModelStringFilterInput
  name: ModelStringFilterInput
  company: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input CreateProjectInput {
  id: ID
  userId: String!
  date: String!
  name: String
  company: String
  description: String
}

input UpdateProjectInput {
  id: ID!
  userId: String
  date: String
  name: String
  company: String
  description: String
}

input DeleteProjectInput {
  id: ID
}

type ModelProjectSkillConnection {
  items: [ProjectSkill]
  nextToken: String
}

input ModelProjectSkillFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  description: ModelStringFilterInput
  skillId: ModelStringFilterInput
  toolIds: ModelStringFilterInput
  and: [ModelProjectSkillFilterInput]
  or: [ModelProjectSkillFilterInput]
  not: ModelProjectSkillFilterInput
}

input CreateProjectSkillInput {
  id: ID
  userId: String!
  description: String
  skillId: String!
  toolIds: [String]
  projectSkillProjectId: ID!
}

input UpdateProjectSkillInput {
  id: ID!
  userId: String
  description: String
  skillId: String
  toolIds: [String]
  projectSkillProjectId: ID
}

input DeleteProjectSkillInput {
  id: ID
}

type ModelCategoryConnection {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  userId: String!
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  userId: String
  name: String
}

input DeleteCategoryInput {
  id: ID
}

type ModelSkillConnection {
  items: [Skill]
  nextToken: String
}

input ModelSkillFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelSkillFilterInput]
  or: [ModelSkillFilterInput]
  not: ModelSkillFilterInput
}

input CreateSkillInput {
  id: ID
  userId: String!
  name: String!
  skillCategoryId: ID
}

input UpdateSkillInput {
  id: ID!
  userId: String
  name: String
  skillCategoryId: ID
}

input DeleteSkillInput {
  id: ID
}

type ModelToolConnection {
  items: [Tool]
  nextToken: String
}

input ModelToolFilterInput {
  id: ModelIDFilterInput
  userId: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelToolFilterInput]
  or: [ModelToolFilterInput]
  not: ModelToolFilterInput
}

input CreateToolInput {
  id: ID
  userId: String!
  name: String!
  toolSkillId: ID!
}

input UpdateToolInput {
  id: ID!
  userId: String
  name: String
  toolSkillId: ID
}

input DeleteToolInput {
  id: ID
}
